name: libKriging release workflow

on:
  push:
    tags:
       - 'v*' # release tag trigger 
  workflow_dispatch:
    inputs:
      release-tag:
        description: 'Release tag'
        required: false
        default: ''
#  release:
#    types:
#      - created
#  repository_dispatch:
#    types: [ make-release ]
#    # sent data in ${{ github.event.client_payload }}

env:
  DEBUG_CI: true

jobs:
  check-release-consistency:
    name: Check Release Consistency
    runs-on: ubuntu-22.04
    outputs:
      git-tag: ${{ steps.expose-variable.outputs.git-tag }}
      draft-release: ${{ steps.expose-variable.outputs.draft-release }}
      
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: 0

      - name: Check tag
        shell: bash
        run: |
          set -eo pipefail
          if [ -n "${{ github.event.inputs.release-tag }}" ]; then
            GIT_TAG=${{ github.event.inputs.release-tag }}
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            GIT_TAG=${{ github.event.release.tag_name }}
          else
            echo "Default GITHUB_REF is $GITHUB_REF" 
            GIT_TAG=$(git describe --tags --dirty=-d)
          fi
          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_ENV

      - name: Verify version name
        run: |
          echo "Checking release tag: ${GIT_TAG}" 
          if [[ "${GIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Valid version name"
          else
            echo "Invalid version name: required scheme is ^v[0-9]+\.[0-9]+\.[0-9]+.*\$"
            exit 1
          fi
          
      - name: Verify source code consistency
        run: |
          CODE_VERSION=$(python3 .travis-ci/release/get_code_version.py)
          if [[ ! "${GIT_TAG}" =~ ^v${CODE_VERSION} ]]; then
            echo "GIT_TAG=${GIT_TAG} vs CODE_VERSION=${CODE_VERSION}"
            echo "Non consistent code and requested tag versions"
            exit 1
          fi
          
      - name: Check available version in pypi.org
        run: |
          if ( python3 .travis-ci/release/check_python_release.py pylibkriging ${GIT_TAG##v} ); then
            echo "Cannot re-upload already available version ${GIT_TAG} in pypi.org"  
            exit 1
          else
            echo "Ok to build this new version ${GIT_TAG}"
          fi
          
      - name: Define a global variables for next jobs
        id: expose-variable
        run: |
          if [[ "${GIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            DRAFT_RELEASE=false
          else
            DRAFT_RELEASE=true
          fi
          # GHA hack
          echo "::set-output name=git-tag::${GIT_TAG}"
          echo "::set-output name=draft-release::${DRAFT_RELEASE}"

  display_release_tag:
    name: Release tag ${{ needs.check-release-consistency.outputs.git-tag }}
    needs: check-release-consistency
    runs-on: ubuntu-22.04
    steps:
      - name: Tag ${{ needs.check-release-consistency.outputs.git-tag }}
        shell: bash
        run: |
          echo "Release is ${{ needs.check-release-consistency.outputs.git-tag }} on $GITHUB_REF"
    
  build-wheel-python:
    needs: check-release-consistency
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macOS-latest ]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          - os: macOS-latest
            python-version: 3.7
        include:
          - os: ubuntu-22.04
            # all versions done in one script wrapper

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          
      - name: Check tag
        shell: bash
        run: |
          GIT_TAG=${{ needs.check-release-consistency.outputs.git-tag }}
          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_ENV
          
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        if: runner.os != 'Linux'

      - name: Define local variables
        shell: bash
        run: |
          echo "ENABLE_PYTHON_BINDING=on"  >> $GITHUB_ENV          
          if [ "$RUNNER_OS" != "Windows" ]; then          
            echo "BUILD_NAME=linux-macos"  >> $GITHUB_ENV
          else
            echo "BUILD_NAME=windows"      >> $GITHUB_ENV
          fi

      - name: Common pre-install
        shell: bash
        run: |
          pip3 install wheel

      - name: Windows pre-install
        shell: bash
        run: |
          # add alternative name python3 (default is python)
          echo "PATH=$PATH"
          PYTHON_CMD_PATH=$(which python)
          PYTHON_CMD_DIR=$(dirname "${PYTHON_CMD_PATH}")
          PYTHON_ALT_CMD_PATH="${PYTHON_CMD_DIR}/python3.exe"
          # do not create symlink if python3 already exists
          [ -e "${PYTHON_ALT_CMD_PATH}" ] || ln -s "${PYTHON_CMD_PATH}" "${PYTHON_ALT_CMD_PATH}"
        if: runner.os == 'Windows'

      - name: install
        shell: bash
        run: .travis-ci/${BUILD_NAME}/install.sh

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.24.x'

      - name: before_script
        shell: bash
        run: .travis-ci/common/before_script.sh

      - name: build
        shell: bash
        run: |
          .travis-ci/release/python-release.sh

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifact-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            dist 
            
#  build-octave-package:
#    needs: check-release-consistency
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - name: "Octave Linux"
#            os: ubuntu-22.04 # required to ease the support of octave â‰¥ 6
#            force_update: on
#          - name: "Octave macOS"
#            os: macOS-latest
#          - name: "Octave Windows"
#            os: windows-latest
#
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: 'recursive'
#
#      - name: Check tag
#        shell: bash
#        run: |
#          GIT_TAG=${{ needs.check-release-consistency.outputs.git-tag }}
#          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_ENV
#
#      - name: Define local variables
#        shell: bash
#        run: |
#          echo "MODE=Release"              >> $GITHUB_ENV
#          echo "ENABLE_PYTHON_BINDING=off" >> $GITHUB_ENV
#          echo "ENABLE_OCTAVE_BINDING=on"  >> $GITHUB_ENV
#
#      - name: Define local variables Unix Like
#        shell: bash
#        run: |
#          echo "BUILD_NAME=linux-macos"    >> $GITHUB_ENV
#        if: runner.os != 'Windows'
#
#      - name: Define local variables Windows
#        shell: bash
#        run: |
#          echo "BUILD_NAME=octave-windows" >> $GITHUB_ENV
#        if: runner.os == 'Windows'
#
#      - name: pre-install-linux
#        shell: bash
#        run: |
#          if [ "${{matrix.force_update}}" == "on" ]; then
#            sudo apt update
#          fi
#          sudo apt install liblapack-dev python3-pip
#          sudo apt install -qy octave liboctave-dev
#        if: runner.os == 'Linux' # or use $RUNNER_OS
#
#      - name: install
#        shell: bash
#        run: .travis-ci/${BUILD_NAME}/install.sh
#
#      - name: Setup cmake
#        uses: jwlawson/actions-setup-cmake@v1.13
#        with:
#          cmake-version: '3.24.x'
#
#      - name: before_script
#        shell: bash
#        run: .travis-ci/common/before_script.sh
#
#      - name: script
#        shell: bash
#        run: .travis-ci/${BUILD_NAME}/build.sh
#
#      - name: test
#        shell: bash
#        run: .travis-ci/${BUILD_NAME}/test.sh
#
#      - name: make package
#        shell: bash
#        run: |
#          .travis-ci/release/octave-release.sh
#
#      - name: Archive build artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: octave-package
#          path: |
#            octave-package

#  build-R-package:
#    needs: check-release-consistency
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - name: "R Linux"
#            os: ubuntu-22.04
#          - name: "R macOS"
#            os: macOS-latest
#          - name: "R Windows"
#            os: windows-latest
#
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: 'recursive'
#
#      - uses: r-lib/actions/setup-r@v2
#        with:
#          r-version: '4.2'
#
#      - name: Check tag
#        shell: bash
#        run: |
#          GIT_TAG=${{ needs.check-release-consistency.outputs.git-tag }}
#          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_ENV
#
#      - name: Define local variables
#        shell: bash
#        run: |
#          echo "MODE=Release"              >> $GITHUB_ENV
#          echo "ENABLE_PYTHON_BINDING=off" >> $GITHUB_ENV
#          echo "ENABLE_OCTAVE_BINDING=off" >> $GITHUB_ENV
#
#      - name: Define local variables Unix Like
#        shell: bash
#        run: |
#          echo "BUILD_NAME=r-linux-macos"  >> $GITHUB_ENV
#        if: runner.os != 'Windows'
#
#      - name: Define local variables Windows
#        shell: bash
#        run: |
#          echo "BUILD_NAME=r-windows"      >> $GITHUB_ENV
#        if: runner.os == 'Windows'
#
#      - name: pre-install-linux
#        shell: bash
#        run: |
#          if [ "${{matrix.force_update}}" == "on" ]; then
#            sudo apt update
#          fi
#          sudo apt install -qy r-base liblapack-dev gfortran
#        if: runner.os == 'Linux' # or use $RUNNER_OS
#
#      - name: install
#        shell: bash
#        run: .travis-ci/${BUILD_NAME}/install.sh
#
#      - name: Setup cmake
#        uses: jwlawson/actions-setup-cmake@v1.13
#        with:
#          cmake-version: '3.24.x'
#
#      - name: before_script
#        shell: bash
#        run: .travis-ci/common/before_script.sh
#
#      - name: script
#        shell: bash
#        run: .travis-ci/${BUILD_NAME}/build.sh
#
#      - name: test
#        shell: bash
#        run: .travis-ci/${BUILD_NAME}/test.sh
#
#      - name: make package
#        shell: bash
#        run: |
#          .travis-ci/release/r-release.sh
#
#      - name: Archive build artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: R-package
#          path: |
#            R-package

  all-package-build-checkpoint:
    name: Build package checkpoint
    needs:
      - check-release-consistency
      - build-wheel-python
#      - build-R-package
#      - build-octave-package
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false

      - name: Check tag
        shell: bash
        run: |
          GIT_TAG=${{ needs.check-release-consistency.outputs.git-tag }}
          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_ENV

      - name: Install hub tools
        shell: bash
        run: |
          # see https://github.com/actions/runner-images/issues/8362
          sudo apt-get update && sudo apt-get install -y hub

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        shell: bash
        #if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -eo pipefail

          if [ "${{ needs.check-release-consistency.outputs.draft-release }}" == "true" ]; then
              QUALIFIER="Draft release"            
          else
              QUALIFIER="Release"  
          fi
          cat <<EOF > RELEASE_NOTE.md
          ${QUALIFIER} ${GIT_TAG}

          This is an automated release note.
          
          EOF
          if [ -z "${{ github.event.release.tag_name }}" ]; then
            hub release create -F RELEASE_NOTE.md "$GIT_TAG"
          fi

  release-python-wheel:
    name: Release Python Wheel to Pypi.org
    needs:
      - check-release-consistency
      - all-package-build-checkpoint
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: python-artifact-*
          path: dist
          merge-multiple: true

      - name: upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          # Debug secrets
          # cf https://stackoverflow.com/a/44606194/12430075
          if [ -n "${TWINE_PASSWORD}" ]; then echo TWINE_PASSWORD is set; fi
          if [ -z "${TWINE_PASSWORD+set}" ]; then echo TWINE_PASSWORD is not set at all; fi
          if [ -z "${TWINE_PASSWORD-unset}" ]; then echo TWINE_PASSWORD is set but empty; fi

          pip3 install twine
          find .
          # TWINE_USERNAME is set from travis global environment
          # TWINE_PASSWORD is set to an API token in Travis settings
          python3 -m twine upload \
                  --repository-url https://upload.pypi.org/legacy/ \
                  ./dist/*.whl
        if: ${{ needs.check-release-consistency.outputs.draft-release == 'false' }}  

#  release-artifacts:
#    name: Upload Release Asset
#    needs:
#      - check-release-consistency
#      - all-package-build-checkpoint
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: false
#
#      - uses: actions/download-artifact@v4
#        with:
#          name: python-artifact
#          path: dist
#        if: ${{ needs.check-release-consistency.outputs.draft-release == 'true' }}
#
#      - uses: actions/download-artifact@v4
#        with:
#          name: octave-package
#          path: dist
#
#      - uses: actions/download-artifact@v4
#        with:
#          name: R-package
#          path: dist
#
#      - name: Check tag
#        shell: bash
#        run: |
#          GIT_TAG=${{ needs.check-release-consistency.outputs.git-tag }}
#          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_ENV
#
#      - name: upload assets
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        shell: bash
#        run: |
#          set -eo pipefail
#          set -x
#
#          # using https://github.com/github/hub
#          mkdir -p dist
#          assets=()
#          for asset in ./dist/*; do
#            assets+=("-a" "$asset")
#          done
#          if [ "${{ needs.check-release-consistency.outputs.draft-release }}" == "true" ]; then
#            hub release edit -m "Draft Release $GIT_TAG" "${assets[@]}" "$GIT_TAG"
#          else
#            hub release edit -m "Release $GIT_TAG" "${assets[@]}" "$GIT_TAG"
#          fi
#
